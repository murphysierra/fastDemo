{"version":3,"sources":["MovieList.js","SearchPage.js","Fetch.js","PlaylistPage.js","App.js","index.js"],"names":["MovieList","props","movieList","addMovieFunction","movies","length","moviesById","i","imdbID","Object","values","filterDuplicateMovies","map","result","MovieCard","movie","className","aria-label","React","memo","Title","Year","useState","active","setActive","disabled","onClick","SearchPage","addMovieToPlaylist","movieResults","setMovieResults","searchInput","setSearchInput","yearInput","setYearInput","useEffect","search","year","fetch","mode","headers","then","json","catch","error","console","warn","getMovieResults","response","Search","Response","log","type","placeholder","value","onChange","event","target","min","max","id","PlaylistPage","playlist","playlistElements","App","setPlaylist","playlistPage","setPlaylistPage","useCallback","confirmation","document","getElementById","innerHTML","setTimeout","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c4aceace.chunk.js","sourcesContent":["import './MovieList.css';\nimport React, { useState } from 'react';\n\n// Helper function to filter out duplicate results by\n// ensuring uniqe imdbID\nfunction filterDuplicateMovies(movieList) {\n\tif (movieList.length < 2) return movieList;\n\tconst moviesById = {};\n\tfor (let i = 0; i < movieList.length; i++) {\n\t\tconst { imdbID } = movieList[i];\n\t\tif (!moviesById[imdbID]) {\n\t\t\tmoviesById[imdbID] = movieList[i];\n\t\t}\n\t}\n\treturn Object.values(moviesById);\n}\n\n// The list of movie results for the current search criteria\nfunction MovieList(props) {\n\tconst { movieList, addMovieFunction } = props;\n\tconst movies = filterDuplicateMovies(movieList)\n\t\t.map((result) => <MovieCard addMovieFunction={addMovieFunction} movie={result} />);\n\n\treturn (\n\t\t<div className='movie-list-container'>\n\t\t\t{movies.length > 0 ? <ul aria-label=\"Movie List\">{movies}</ul> : <></>}\n\t\t</div>\n\t);\n}\n\nexport default React.memo(MovieList);\n\n// An individual card with info on the movie, and a button to add it to the playlist\nfunction MovieCard(props) {\n\tconst { Title, imdbID, Year } = props.movie;\n\tconst [active, setActive] = useState(true);\n\treturn (\n\t\t<li aria-label={Title} className='movie-card' key={imdbID + Year}>\n\t\t\t<div className='movie-info'>\n\t\t\t\t<h2 className='movie-title'>{Title}</h2>\n\t\t\t\t<h3 className='movie-year'>{Year}</h3>\n\t\t\t</div>\n\t\t\t<button\n\t\t\t\tclassName='playlist-button'\n\t\t\t\tdisabled={!active}\n\t\t\t\tonClick={() => {\n\t\t\t\t\tprops.addMovieFunction(props.movie);\n\t\t\t\t\tsetActive(false);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{active ? 'Add To Playlist' : 'In Your Playlist'}\n\t\t\t</button>\n\t\t</li>\n\t)\n}","import './App.css';\nimport { useEffect, useState } from 'react';\nimport getMovieResults from './Fetch';\nimport MovieList from './MovieList';\n\nexport function SearchPage(props) {\n\tconst { addMovieToPlaylist } = props;\n\tconst [movieResults, setMovieResults] = useState([]);\n\tconst [searchInput, setSearchInput] = useState('');\n\tconst [yearInput, setYearInput] = useState('');\n\n\tuseEffect(() => {\n\t\tif (searchInput !== '' || yearInput !== '') {\n\t\t\tgetMovieResults(searchInput, yearInput)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tif (response && response.Search) {\n\t\t\t\t\t\tsetMovieResults(response.Search); // need to deduplicate results\n\t\t\t\t\t}\n\t\t\t\t\t// Handle results that don't fail, but return 'no results' or 'too many results'\n\t\t\t\t\telse if (response && response.Response === 'False') {\n\t\t\t\t\t\tsetMovieResults([]);\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log('response: ', response);\n\t\t\t\t});\n\t\t} else if (searchInput === '' && yearInput === '') setMovieResults([]);\n\t}, [searchInput, yearInput]);\n\n\n\treturn (\n\t\t<div>\n\t\t\t<div className='search-bar'>\n\t\t\t\t<h1>Search For Movies</h1>\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tplaceholder='Title'\n\t\t\t\t\tvalue={searchInput}\n\t\t\t\t\tonChange={(event) => setSearchInput(event.target.value)} />\n\t\t\t\t<input\n\t\t\t\t\ttype='number'\n\t\t\t\t\tmin={1800}\n\t\t\t\t\tmax={3000}\n\t\t\t\t\tplaceholder='Year'\n\t\t\t\t\tvalue={yearInput}\n\t\t\t\t\tonChange={(event) => setYearInput(event.target.value)} />\n\t\t\t\t<div id='confirmation-container' />\n\t\t\t</div>\n\t\t\t<MovieList addMovieFunction={addMovieToPlaylist} movieList={movieResults} />\n\t\t</div>\n\t);\n}","const apiKey = '4bfb31c1';\n\nexport default function getMovieResults(searchInput, yearInput) {\n\tconst search = searchInput !== '' ? '&s=' + searchInput : '';\n\tconst year = yearInput !== '' ? '&y=' + yearInput : '';\n\treturn fetch( `http://www.omdbapi.com/?apikey=${apiKey}${search}${year}`, {\n\t\t\tmode: 'cors',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t}\n\t\t})\n\t\t.then(result => result.json())\n\t\t.catch(error => console.warn('Error: ', error));\n}","import './PlaylistPage.css';\n\nexport function PlaylistPage(props) {\n\tconst playlist = props.playlist;\n\tconst playlistElements = playlist.map((movie) => <li key={movie.imdbID}>{movie.Title}</li>);\n\n\treturn (\n\t\t<div className=\"playlist\">\n\t\t\t<h1>Playlist</h1>\n\t\t\t{playlist.length === 0 ? \"There are no items in your playlist yet\" : <ul>{playlistElements}</ul>}\n\t\t\t<footer>My favorite color is blue</footer>\n\t\t</div>\n\t);\n}","import './App.css';\nimport { useCallback, useState } from 'react';\nimport { SearchPage } from './SearchPage';\nimport { PlaylistPage } from './PlaylistPage';\n\nfunction App() {\n  const [playlist, setPlaylist] = useState([]);\n  const [playlistPage, setPlaylistPage] = useState(false);\n\n  const addMovieToPlaylist = useCallback((movie) => {\n    setPlaylist([...playlist, movie]);\n    const confirmation = document.getElementById('confirmation-container');\n    confirmation.innerHTML = `${movie.Title} was added to your playlist`;\n    setTimeout(() => confirmation.innerHTML = '', 10000)\n  }, [playlist, setPlaylist]);\n\n  return (\n    <div className='App'>\n      {playlistPage ? <PlaylistPage playlist={playlist} /> : <SearchPage addMovieToPlaylist={addMovieToPlaylist} />}\n      <button\n        className='page-toggle'\n        onClick={() => setPlaylistPage(!playlistPage)}>\n          {playlistPage ? 'Search' : 'Playlist'}\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n;\n"],"sourceRoot":""}